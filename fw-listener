#!/usr/bin/perl
#    This file is part of IFMI FarmManager.	
#
use warnings;
use strict;
use IO::Select;
use IO::Socket::INET;
use Proc::PID::File;
use DBI;
use JSON;

if (Proc::PID::File->running()) {
  # one at a time, gentlemen
  exit(0);
}

my $verbose;
my $listenport = 54545;
#if (defined($conf{settings}{listen_port})) {
#  $listenport = $conf{settings}{listen_port};
#}
my $socket = IO::Socket::INET->new(Proto => 'udp', Type => SOCK_DGRAM, LocalPort => $listenport, Blocking  => 0) 
or die "Cannot open socket.";

my $sel = IO::Select->new();
$sel->add($socket);

while($socket) {
  while(my @ready = $sel->can_read(0)) {
    foreach my $fh (@ready) {
      my $ip = $socket->recv(my $data, 8000);
      my ($port, $ipaddr) = sockaddr_in($socket->peername);
      my $host = inet_ntoa($ipaddr); 
      my $mname; my $mfgroup; my $mver; my @summary; my @pools; my @devices;
      if ($data =~ m/^(.+?)\|(.+?)\|/) {
        $mname = $1; $mfgroup = $2; 
      }
      if ($data =~ m/ver\:(.+?\|)/) {
        $mver = $1;
      }
#      print "$data\n";
      while ($data =~ m/\|\d+\:(\{.+?\})/g) {
        push(@devices, decode_json $1);
      }
      while ($data =~ m/pool\:(\{.+?\})/g) {
        push(@pools, decode_json $1);
      }
      while ($data =~ m/sum\:(\{.+?\})/g) {
        push(@summary, decode_json $1);
      }
      print "recvd packet from $host $mname\n" if (defined $verbose);      
      updateMiner($host,$mname,$mfgroup,$mver,\@summary,\@pools,\@devices);
    }     
  } 
 sleep(2);
}

sub updateMiner {
  my ($host,$mname,$mfgroup,$mver,$summary,$pools,$devices) = @_;
  my @summary = @{ $summary };
  my @pools = @{ $pools };
  my @devices = @{ $devices };
  my $dbname = "/opt/ifmi/fm.db"; my $now = time;
  if (-e $dbname) {
    my $instance = "UDP"; $instance = "UDP-A" if ($mname =~ m/-asic$/); 
    my $msum = "";
    if (@summary ne "") {
      $msum .= "Elapsed=" . ${$summary[0]}{'elapsed'} . ",";
      $msum .= "MHS av=" . ${$summary[0]}{'hashavg'} . ",";
      $msum .= "Work Utility=" . ${$summary[0]}{'work_utility'} . ",";
      $msum .= "Hardware Errors=" . ${$summary[0]}{'hardware_errors'} . ",";
      my $mrat;
      my $macc = ${$summary[0]}{'shares_accepted'};
      my $mrej = ${$summary[0]}{'shares_invalid'};
        if ($mrej != 0) {
          $mrat =  sprintf("%.2f", $mrej / ($macc + $mrej)*100);
        } else { $mrat = "0.00"; }
      $msum .= "Device Rejected\%=" . $mrat . ",";
    }
    my $mpools = ""; 
    if (@pools ne "") {
      for (my $i=0;$i<@pools;$i++) {
        $mpools .= "POOL=" . ${$pools[$i]}{'poolid'} . ","; 
        $mpools .= "URL=" . ${$pools[$i]}{'url'} . ",";
        $mpools .= "Status=" . ${$pools[$i]}{'status'} . ",";
        $mpools .= "Priority=" . ${$pools[$i]}{'priority'} . ",.,";
        $mpools .= "User=" . ${$pools[$i]}{'user'} . ",";
        $mpools .= "\n";
      }
    }
    my $mgpus = ""; 
    if (@devices ne "") {
      if ($instance eq "UDP-A") {
        for (my $i=0;$i<@devices;$i++) {    
          $mgpus .= "ASC=$i,";
          $mgpus .= "Status=" . $devices[$i]{'status'} . ",";
          $mgpus .= "MHS 5s=" . $devices[$i]{'hashrate'}/1000 . ",";
          $mgpus .= "Pool=" . $devices[$i]{'pool_url'} . ",";
          $mgpus .= "Accepted=" . $devices[$i]{'shares_accepted'} . ",";
          $mgpus .= "Rejected=" . $devices[$i]{'shares_invalid'} . ",";
          $mgpus .= "Hardware Errors=" . $devices[$i]{'hardware_errors'} . ",";
          $mgpus .= "Temperature=" . $devices[$i]{'current_temp_0_c'} . ",";
        }
      } else {
        for (my $i=0;$i<@devices;$i++) {    
          $mgpus .= "GPU=$i,";
          $mgpus .= "Status=" . $devices[$i]{'status'} . ",";
          $mgpus .= "MHS 5s=" . $devices[$i]{'hashrate'}/1000 . ",";
          $mgpus .= "Pool=" . $devices[$i]{'pool_url'} . ",";
          $mgpus .= "Accepted=" . $devices[$i]{'shares_accepted'} . ",";
          $mgpus .= "Rejected=" . $devices[$i]{'shares_invalid'} . ",";
          $mgpus .= "Hardware Errors=" . $devices[$i]{'hardware_errors'} . ",";
          $mgpus .= "Temperature=" . $devices[$i]{'current_temp_0_c'} . ",";
          $mgpus .= "Fan Speed=" . $devices[$i]{'fan_rpm_c'} . ",";
          $mgpus .= "Fan Percent=" . $devices[$i]{'fan_speed_c'} . ",";
          $mgpus .= "Intensity=" . $devices[$i]{'intensity'} . ",";
          $mgpus .= "GPU Clock=" . $devices[$i]{'current_core_clock_c'} . ",";
          $mgpus .= "Memory Clock=" . $devices[$i]{'current_mem_clock_c'} . ",";
          $mgpus .= "GPU Voltage=" . $devices[$i]{'current_core_voltage_c'} . ",";
          $mgpus .= "\n";
        }
      }
    }
    my $dbh = DBI->connect("dbi:SQLite:dbname=$dbname", { RaiseError => 1 }) or die $DBI::errstr;
    my $nmcheck = $dbh->selectrow_array("SELECT IP From Miners WHERE IP= ? AND Port= ?", undef, $host,$instance);
    my $tmcheck = $dbh->selectrow_array("SELECT IP From Miners WHERE IP= ? AND Port != ?", undef, $host,$instance);
    if (!defined $tmcheck) {
      if (!defined $nmcheck) {
        $dbh->do("INSERT INTO Miners(IP, Port, Name, User, Pass, Mgroup, Updated, Devices, Pools, Summary, Version, Access, MonProf, Amail) VALUES ('$host', '$instance', '$mname', '', '', '$mfgroup', '$now', '$mgpus', '$mpools', '$msum', '$mver', 'D', '0', 'N')");
        print "added $host $mname\n" if (defined $verbose);     
      } else {
        my $sth = $dbh->prepare("UPDATE Miners SET Version= ?, Devices= ?, Pools= ?, Summary= ?, Updated= ? WHERE IP= ? AND Port= ? ");
        $sth->execute($mver, $mgpus, $mpools, $msum, $now, $host, $instance); $sth->finish();
        print "updated $host $mname\n" if (defined $verbose);     
      }
    }
  }
}


